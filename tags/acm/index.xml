<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ACM on 在水异方</title>
    <link>/tags/acm/</link>
    <description>Recent content in ACM on 在水异方</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>©{year} 在水异方</copyright>
    <lastBuildDate>Tue, 30 Sep 2014 17:20:25 +0800</lastBuildDate>
    
	<atom:link href="/tags/acm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UVa 437 The Tower of Babylon</title>
      <link>/post/csdn/uva-437-the-tower-of-babylon/</link>
      <pubDate>Tue, 30 Sep 2014 17:20:25 +0800</pubDate>
      
      <guid>/post/csdn/uva-437-the-tower-of-babylon/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。 const int INF = 0x3fffffff; const double eps = 1e-6; struct NODE{ int a,b,c; NODE(){} NODE(int x,int y,int z): a(x),b(y),c(z) {} }a[111]; bool cmp(NODE a,NODE b){ if (a.a==b.a) return a.b&amp;lt;b.b; return a.a&amp;lt;b.a; } int d[111]; int I,T,n,m; int main(){ freopen(&amp;ldquo;in.txt&amp;rdquo;,&amp;ldquo;r&amp;rdquo;,stdin); while ( scanf(&amp;quot;%d&amp;rdquo;,&amp;amp;n) &amp;amp;&amp;amp; n){ for ( int i(0); i&amp;lt;n;</description>
    </item>
    
    <item>
      <title>UVa 10129 Play on Words</title>
      <link>/post/csdn/uva-10129-play-on-words/</link>
      <pubDate>Thu, 14 Aug 2014 20:54:58 +0800</pubDate>
      
      <guid>/post/csdn/uva-10129-play-on-words/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。 int sz[333]; int fa[333]; bool ok[333]; // 数据中使用到的单词 int n, T; int getfa(int v) { if ( fa[v] == v ) return v; return fa[v] = getfa(fa[v]); } void init() { memset(ok, 0, sizeof(ok)); memset(sz, 0, sizeof(sz)); cin &amp;gt;&amp;gt; n; string a;</description>
    </item>
    
    <item>
      <title>POJ 1017 Packets 悼念死去的模拟</title>
      <link>/post/csdn/poj-1017-packets-%E6%82%BC%E5%BF%B5%E6%AD%BB%E5%8E%BB%E7%9A%84%E6%A8%A1%E6%8B%9F/</link>
      <pubDate>Fri, 18 Jul 2014 18:51:34 +0800</pubDate>
      
      <guid>/post/csdn/poj-1017-packets-%E6%82%BC%E5%BF%B5%E6%AD%BB%E5%8E%BB%E7%9A%84%E6%A8%A1%E6%8B%9F/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。 int s =a[6]+a[5]+a[4]; // a5 if (a[5]*11 &amp;amp;gt;= a[1]) a[1] = 0; else a[1] -= a[5]*11; // a4 for ( int i(1);i&amp;amp;lt;=a[4];i++){ t = push(20,2,5); if (t) t = push(t,1,t); } // a3 s += a[3] / 4; // 整装3 a[3] %= 4; if (a[3]){ // 剩下</description>
    </item>
    
    <item>
      <title>POJ 1273 Drainage Ditches 网络流模版</title>
      <link>/post/csdn/poj-1273-drainage-ditches-%E7%BD%91%E7%BB%9C%E6%B5%81%E6%A8%A1%E7%89%88/</link>
      <pubDate>Wed, 02 Apr 2014 22:57:45 +0800</pubDate>
      
      <guid>/post/csdn/poj-1273-drainage-ditches-%E7%BD%91%E7%BB%9C%E6%B5%81%E6%A8%A1%E7%89%88/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。 struct EDGE { int to, cap, rev; }; vector&amp;lt;EDGE&amp;gt; g[N]; int ff[N][N]; bool used[N]; int n,m; int dfs(int v,int t,int f){ if ( v == t ) return f; used[v]= true; for ( int i(0); i &amp;lt; g[v].size(); i++){ EDGE &amp;amp;e = g[v][i]; if ( !used[e.to] &amp;amp;&amp;amp; e.cap &amp;gt; 0){</description>
    </item>
    
    <item>
      <title>POJ 3321 Apple Tree dfs序的应用</title>
      <link>/post/csdn/poj-3321-apple-tree-dfs%E5%BA%8F%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Mon, 31 Mar 2014 09:56:24 +0800</pubDate>
      
      <guid>/post/csdn/poj-3321-apple-tree-dfs%E5%BA%8F%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。 void dfs(int v) { P1[v]=++tt; for ( int p = a[v].next; p; p=st[p].next ) dfs(st[p].v); P2[v]=tt; return; } inline int l(int i) { return i &amp;amp; -i; } void update(int x,int k) { while (x&amp;lt;=n) { t[x] += k; x += l(x); } } int gs(int x) { int s</description>
    </item>
    
    <item>
      <title>POJ 3461 Oulipo KMP练习</title>
      <link>/post/csdn/poj-3461-oulipo-kmp%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Mon, 31 Mar 2014 09:34:47 +0800</pubDate>
      
      <guid>/post/csdn/poj-3461-oulipo-kmp%E7%BB%83%E4%B9%A0/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。 void prekmp(char* b) { next[0]=-1; int j=-1; for ( int i(1); b[i]; i++) { while ( j!=-1 &amp;amp;&amp;amp; b[i]!=b[j+1]) j=next[j]; if ( b[i]==b[j+1] ) j++; next[i]=j; } } int kmp(char *a,char *b) { int j=-1,ans=0; for ( int i(0); a[i]; i++) { while ( j!=-1 &amp;amp;&amp;amp; a[i]!=b[j+1] ) j=next[j]; if</description>
    </item>
    
    <item>
      <title>USACO Section 1.4.3 The Clocks</title>
      <link>/post/csdn/usaco-section-1.4.3-the-clocks/</link>
      <pubDate>Thu, 28 Nov 2013 16:37:01 +0800</pubDate>
      
      <guid>/post/csdn/usaco-section-1.4.3-the-clocks/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。 |&amp;mdash;&amp;mdash;-| |&amp;mdash;&amp;mdash;-| |&amp;mdash;&amp;mdash;-| | | | | | | | O | | O | | O | | | | | | | | | | |&amp;mdash;&amp;mdash;-| |&amp;mdash;&amp;mdash;-| |&amp;mdash;&amp;mdash;-| D E F |&amp;mdash;&amp;mdash;-| |&amp;mdash;&amp;mdash;-| |&amp;mdash;&amp;mdash;-| | | | | | | | O | | O&amp;mdash;| | O |</description>
    </item>
    
    <item>
      <title>POJ 3041 Asteroids 匈牙利算法 二分图最大匹配</title>
      <link>/post/csdn/poj-3041-asteroids-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Fri, 15 Nov 2013 16:23:18 +0800</pubDate>
      
      <guid>/post/csdn/poj-3041-asteroids-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。 const int N = 555; int n, m, g[N][N], chk[N], match[N]; int dfs(int v){ int t; for ( int i = 1; i &amp;lt;= n; i++){ if ( g[i][v] &amp;amp;&amp;amp; !chk[i] ){ chk[i] = 1; t = match[i]; match[i] = v; if ( t == -1 || dfs(t) ) return</description>
    </item>
    
    <item>
      <title>ubuntu 安装 HUSTOJ</title>
      <link>/post/csdn/ubuntu-%E5%AE%89%E8%A3%85-hustoj/</link>
      <pubDate>Wed, 16 Oct 2013 01:46:40 +0800</pubDate>
      
      <guid>/post/csdn/ubuntu-%E5%AE%89%E8%A3%85-hustoj/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>HOJ 2651 PIE</title>
      <link>/post/csdn/hoj-2651-pie/</link>
      <pubDate>Thu, 27 Jun 2013 16:56:29 +0800</pubDate>
      
      <guid>/post/csdn/hoj-2651-pie/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>HDOJ 4152 ZZY’s Dilemma</title>
      <link>/post/csdn/hdoj-4152-zzys-dilemma/</link>
      <pubDate>Thu, 27 Jun 2013 02:38:45 +0800</pubDate>
      
      <guid>/post/csdn/hdoj-4152-zzys-dilemma/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>ZOJ 3203 Light Bulb</title>
      <link>/post/csdn/zoj-3203-light-bulb/</link>
      <pubDate>Thu, 27 Jun 2013 02:34:39 +0800</pubDate>
      
      <guid>/post/csdn/zoj-3203-light-bulb/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>USACO Section 1.3.6 Prime Cryptarithm</title>
      <link>/post/csdn/usaco-section-1.3.6-prime-cryptarithm/</link>
      <pubDate>Wed, 22 May 2013 11:07:06 +0800</pubDate>
      
      <guid>/post/csdn/usaco-section-1.3.6-prime-cryptarithm/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。 if (i*j&amp;amp;lt;10000 &amp;amp;amp;&amp;amp;amp; i*(j/10)&amp;amp;lt;1000 &amp;amp;amp;&amp;amp;amp; i*(j%10)&amp;amp;lt;1000 &amp;amp;amp;&amp;amp;amp; hash(j) &amp;amp;amp;&amp;amp;amp; hash(i*(j%10)) &amp;amp;amp;&amp;amp;amp; hash(i*(j/10)) &amp;amp;amp;&amp;amp;amp; hash(i*j)) { ans++; // printf(&amp;quot;%d * %d = %d0 + %d = %d \n&amp;quot;,i,j,i*(j/10),i*(j%10),i*j); } } } } printf(&amp;quot;%d\n&amp;quot;,ans); return 0; }</description>
    </item>
    
    <item>
      <title>USACO Section 1.3.5 Calf Flac</title>
      <link>/post/csdn/usaco-section-1.3.5-calf-flac/</link>
      <pubDate>Wed, 22 May 2013 11:03:07 +0800</pubDate>
      
      <guid>/post/csdn/usaco-section-1.3.5-calf-flac/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>USACO Section 1.3.3 Barn Repair</title>
      <link>/post/csdn/usaco-section-1.3.3-barn-repair/</link>
      <pubDate>Wed, 22 May 2013 10:54:09 +0800</pubDate>
      
      <guid>/post/csdn/usaco-section-1.3.3-barn-repair/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>USACO Section 1.3.2 Mixing Milk</title>
      <link>/post/csdn/usaco-section-1.3.2-mixing-milk/</link>
      <pubDate>Wed, 22 May 2013 10:44:34 +0800</pubDate>
      
      <guid>/post/csdn/usaco-section-1.3.2-mixing-milk/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。 using namespace std; struct milk { int w,p; }; milk a[maxn+1]; int m,n; bool cmp(milk a ,milk b){ return a.p &amp;lt; b.p; } int main(){ freopen(&amp;ldquo;milk.in&amp;rdquo;,&amp;ldquo;r&amp;rdquo;,stdin); freopen(&amp;ldquo;milk.out&amp;rdquo;,&amp;ldquo;w&amp;rdquo;,stdout); scanf(&amp;quot;%d%d&amp;rdquo;,&amp;amp;m,&amp;amp;n); for (int i=1;i&amp;lt;=n;i++){ scanf(&amp;quot;%d%d&amp;rdquo;,&amp;amp;a[i].p,&amp;amp;(a[i].w)); } sort(a+1,a+n+1,cmp); int s=m,sp=0,k; for (int i=1;s;i++){ if ((k=a[i].w)&amp;gt;s) k=s; s-=k; sp+=k*a[i].p; } printf(&amp;quot;%d\n&amp;rdquo;,sp); return 0; }</description>
    </item>
    
    <item>
      <title>POJ 1088 滑雪</title>
      <link>/post/csdn/poj-1088-%E6%BB%91%E9%9B%AA/</link>
      <pubDate>Sat, 23 Mar 2013 13:03:02 +0800</pubDate>
      
      <guid>/post/csdn/poj-1088-%E6%BB%91%E9%9B%AA/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>USACO Section 1.2.5 Palindromic Squares</title>
      <link>/post/csdn/usaco-section-1.2.5-palindromic-squares/</link>
      <pubDate>Mon, 11 Mar 2013 18:15:41 +0800</pubDate>
      
      <guid>/post/csdn/usaco-section-1.2.5-palindromic-squares/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>USACO Section 1.2.3 Transformations</title>
      <link>/post/csdn/usaco-section-1.2.3-transformations/</link>
      <pubDate>Mon, 11 Mar 2013 16:04:47 +0800</pubDate>
      
      <guid>/post/csdn/usaco-section-1.2.3-transformations/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>USACO Section 1.2.4 Name That Number</title>
      <link>/post/csdn/usaco-section-1.2.4-name-that-number/</link>
      <pubDate>Tue, 05 Mar 2013 13:20:17 +0800</pubDate>
      
      <guid>/post/csdn/usaco-section-1.2.4-name-that-number/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>USACO Section 1.2.2 Milking Cows</title>
      <link>/post/csdn/usaco-section-1.2.2-milking-cows/</link>
      <pubDate>Mon, 04 Mar 2013 22:23:21 +0800</pubDate>
      
      <guid>/post/csdn/usaco-section-1.2.2-milking-cows/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。 OUTPUT FORMAT A single line with two integers that represent the longest continuous time of milking and the longest idle time. SAMPLE OUTPUT (file milk2.out) 900 300</description>
    </item>
    
    <item>
      <title>USACO Section 1.1.7 Broken Necklace</title>
      <link>/post/csdn/usaco-section-1.1.7-broken-necklace/</link>
      <pubDate>Mon, 04 Mar 2013 21:58:18 +0800</pubDate>
      
      <guid>/post/csdn/usaco-section-1.1.7-broken-necklace/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>POJ 题目分类与计划</title>
      <link>/post/csdn/poj-%E9%A2%98%E7%9B%AE%E5%88%86%E7%B1%BB%E4%B8%8E%E8%AE%A1%E5%88%92/</link>
      <pubDate>Thu, 31 Jan 2013 14:41:53 +0800</pubDate>
      
      <guid>/post/csdn/poj-%E9%A2%98%E7%9B%AE%E5%88%86%E7%B1%BB%E4%B8%8E%E8%AE%A1%E5%88%92/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>HDOJ - 1318 Palindromes</title>
      <link>/post/csdn/hdoj-1318-palindromes/</link>
      <pubDate>Thu, 17 Jan 2013 13:36:47 +0800</pubDate>
      
      <guid>/post/csdn/hdoj-1318-palindromes/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>HDOJ - 2045 RPG难题</title>
      <link>/post/csdn/hdoj-2045-rpg%E9%9A%BE%E9%A2%98/</link>
      <pubDate>Thu, 22 Nov 2012 21:01:27 +0800</pubDate>
      
      <guid>/post/csdn/hdoj-2045-rpg%E9%9A%BE%E9%A2%98/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。</description>
    </item>
    
    <item>
      <title>HDOJ – 2043 密码</title>
      <link>/post/csdn/hdoj-2043-%E5%AF%86%E7%A0%81/</link>
      <pubDate>Thu, 22 Nov 2012 19:17:42 +0800</pubDate>
      
      <guid>/post/csdn/hdoj-2043-%E5%AF%86%E7%A0%81/</guid>
      <description>此页面通过工具从 csdn 导出，格式可能有问题。 scanf(&amp;quot;%d\n&amp;quot;,&amp;amp;amp;n); while (n--){ getline(cin,ss); if (yes(ss)) printf(&amp;quot;YES\n&amp;quot;); else printf(&amp;quot;NO\n&amp;quot;); } return 0; } 我的博客</description>
    </item>
    
  </channel>
</rss>